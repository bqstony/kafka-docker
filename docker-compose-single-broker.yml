version: '3.1'
services:
  zookeeper-1:
    image: bqstony/wurstmeister-arm32v7-zookeeper:3.4.14
    container_name: zookeeper-1
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      # ensemble membership. The format is server.<myid>=<hostname>:<leaderport>:<electionport>
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888

  kafka-1:
    image: bqstony/wurstmeister-arm32v7-kafka:2.12-2.3.0
    container_name: kafka-1
    hostname: kafka-1
    restart: always
    ports:
      - 9092:9092
    depends_on:
      - zookeeper-1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181
      # defines key/value pairs for the security protocol to use, per listener name.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      # Kafka brokers communicate between themselves, usually on the internal network, specify the listener
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER
      # required in wurstmeister when used kafka_advertised_listeners
      KAFKA_LISTENERS: LISTENER_DOCKER://:19092,LISTENER_EXTERNAL://:9092
      # This is the metadata thatâ€™s passed back to clients. We need a bind for Docker network and also the Localhost and maybe from DNS name
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER://kafka-1:19092,LISTENER_EXTERNAL://10.10.1.30:9092
      #remove? KAFKA_ADVERTISED_HOST_NAME: 10.10.1.30
    #volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock
